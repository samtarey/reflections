How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It allowed me to see the changes I updated in a newer version(which was the source of a bug) at a stretch. I did not have to check and compare each line of code from two files one by one which increased my efficiency.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    - It allows me to keep different versions of working modules so that when I want to revoke the changes I made to the newer version of a code file, I could perform it without having to worry if it might break the current working feature. It also could help me in quickly locating which version has a buggy feature so that I can work on only that particular version.
    - It keeps the project better organized.
    - It allows me as a developer to work on multiple features as time permits.
    - Better collaboration is possible in a team which in turn makes me an efficient programmer.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    - Saving different versions of a content/code file automatically is useful as users dont have to remember saving them every now and then. At the same time this feature could end up creating a lot of versions of the content/code files which could be unnecessary as users would want to create different versions based on logical changes made.
    - Manually choosing when to create a commit allows user to create versions of files based on different logical changes. This approach may avoid cluttering of unnecessary versions as opposed to auto commit feature. The only drawback of manual approach would be user has to be diligent and take care of saving/commiting changes promptly, failing to do so would end up creating a lot of logical/feature changes constituting one commit.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    As all files in a repository are linked(logically) in some way it is a great feature of GIT having multiple files saved in one commit. If there would have been seperate commits for each version of these files in one repository it would be greatly difficult to track a bug as each such different versions of each files would need to be compared against which would be time consuming, too.

How can you use the commands git log and git diff to view the history of files?

    git log enlists all the commits made in a repository prior to a current commit including current one. That also includes a unique commit ID, author, date and a message associated with each ID. The message gives brief information about the changes made to each commit. git log --stat command further helps us knowing additing inofrmation like which files were affected and how many changes were done. git diff uses these commit IDs and lets us find the number of additions and deletions of code lines made in these versions.


How might using version control make you more confident to make changes that
could break something?

    A version control system saves each versions of code/content files as our work progresses and it also allows us to recall specific version for testing purpose later. It allows us to revert the changes made to current version back to previous one hence it is convenient and easier to test your new code or add new feature without having to worry if it might break the working features.

Now that you have your workspace set up, what do you want to try using Git for?

    Create a repository for Project1 Mock up website.
    Create a repository for reflections.
    Review the history of project files.
