What happens when you initialize a repository? Why do you need to do it?
	git init command creates an empty repository. It doesnt contain any commits. The newly created .git subfolder(under your project folder) contains all the necessary metadata for the newly created repository.
	The basic building block of GIT version control system is repository. In order to do anything in git you have to have a git repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
	staging area contains information about what will go into your next commit whereas a repository contains metadata about commits and object database. Working directory is where you checked out your local repository and git lets you choose which files from your working directory should go to staging area and then to repository.
	Advantages - it gives you full control over which files you want to commit and when. Also facilitates the idea of committing logically related changes instead of committing all files at once.

How can you use the staging area to make sure you have one commit per logical
change?
	Staging area allows you to stage only portions of a modified file. This is to avoid - two or more logically unrelated changes contributing towards one commit just because you forgot to commit them one by one. This approach helps to review your changes better than reviewing all the chnages made to files at once.
	After modifying a number of files, you may want to review only portions of changes made to a particular file. You can add those changes to staging area and then commit those changes to repository. You can always use git diff(to compare the changes between your working directory and staging area) and git diff --staged(to compare and check if I really want to commit the chnages I added to staging area). I also like to use git status to check if the changes made are added to staged area or to a repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branching is helpful in saving the current state and having the ability to go back to the older state whenever we want or merge the new state with the old one once the new code path is stable and working. Branches would also be useful in keep your project files organized. You and your teammates can always work on different branches in order to build a new feature but the main code is always kept intact and free of bugs and working.

	In following situations I would think that creating branches would be helpful:
	- There might be times when a priority 1 bug surfaces and fix needs to be applied asap. I am expected to discontinue my current work of feature building and instead focus on the priority 1 task.
	- While I am going to start working on a new feature OR a deadline to build and complete a feature is near, I would not want to break my main working code while I am working on a new feature and hence creating a branch for this new feature, testing it independently and then merging the new feature into main program is always advisable.
	- when I am being asked to apply a quickfix as another developer who was working on the same is away for some reason and I am told to drop everything and fix a newly discovered bug.


How do the diagrams help you visualize the branch structure?
	diagrams gives me clarity of thought and gives me a visual of a repository in terms of number of commits and branches. It also gives me a clear picture of reachability.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Once you have finished working on a feature, it is important to add that feature to the main code. You can achieve that by "git merge" feature.
	When there is a linear path between the current main branch and the target branch to be merged, all git does is combine the histories of the two branch tips and move the current branch tip up to the new target branch so that now all the commits prior to the current as well as new target branch are accessible.If the branches have diverged, git uses 3 commits to generate the merge commit: 2 branch tips and their common ancestor.

	After merging a new commit is created. That commit stores information about both its parent commits which were merged. This merged commit now becomes the new tip of the current master/main branch. After the merge, the master/main branch contains all the changes prior to the merge in master/main as well as the target branch and all the commits in both branches are now accessible by the resultant merged branch.

	Again representing the same using a diagram tells us about reachability as well as the clear picture after merging two commits/branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
